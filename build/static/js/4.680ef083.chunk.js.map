{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","elementConfig","onChange","changed","value","className","join","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","E_React_BurgerBuilder_burgerbuilder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchOffModeHandler","prevState","this","buildingBurger","authRedirectPath","console","log","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_7__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_13__","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_12__","to","errorMessage","error","message","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_8__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","isSignup","actions"],"mappings":"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","file":"static/js/4.680ef083.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Input.css'\r\nconst input = (props) => {\r\n    let inputElement=null;\r\n    const inputClasses=[classes.InputElement];\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement=<input {...props.elementConfig} onChange={props.changed} value={props.value} \r\n            className={inputClasses.join(' ')}/>\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea {...props.elementConfig} onChange={props.changed} value={props.value} \r\n            className={inputClasses.join(' ')}/>\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select value={props.value} onChange={props.changed}\r\n                className={inputClasses.join(' ')}>\r\n                {props.elementConfig.options.map(option =>{\r\n                    return <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                })}\r\n                </select>\r\n            break;\r\n        default:\r\n            inputElement = <input {...props.elementConfig} onChange={props.changed} value={props.value} \r\n            className={inputClasses.join(' ')}/>\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label> \r\n            {inputElement}           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\"};","import React, { Component } from 'react'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport classes from './Auth.css'\r\nimport * as actions from '../../store/actions/index'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport { updateObject,checkValidity } from '../../shared/utitlity'\r\nclass Auth extends Component {\r\n    state = {\r\n        controls:{\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail:true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength:6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp:true\r\n    }\r\n   \r\n    inputChangedHandler = (event,controlName) => {\r\n        const updatedControls = updateObject(this.state.controls,{\r\n            [controlName]: updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({controls:updatedControls});\r\n    }\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignUp)\r\n    }\r\n    switchOffModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignUp: !prevState.isSignUp}\r\n        })\r\n    } \r\n    componentDidMount() {\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            console.log(\"Auth container componentDidMount called\")\r\n            this.props.onSetAuthRedirectPath()\r\n        }\r\n    }\r\n    render() {\r\n        const formElementsArray = [];\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            })\r\n        }\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input key={formElement.id}\r\n                   elementType={formElement.config.elementType}\r\n                   elementConfig={formElement.config.elementConfig}\r\n                   changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                   value={formElement.config.value}\r\n                   invalid={!formElement.config.valid}\r\n                   touched={formElement.config.touched}\r\n                   label={formElement.config.elementConfig.placeholder}\r\n                   shouldValidate={formElement.config.validation} />        \r\n                ));\r\n            if(this.props.loading) {\r\n                form =<Spinner />\r\n            }\r\n            let authRedirect = null;\r\n            if(this.props.isAuthenticated){\r\n                authRedirect= <Redirect to={this.props.authRedirectPath} />\r\n                console.log(\"[Inside Auth container] Path to redirect to \", this.props.authRedirectPath)\r\n            }\r\n        let errorMessage = null;\r\n        if(this.props.error) {\r\n            errorMessage = (\r\n                <p>{ this.props.error.message }</p>\r\n            )\r\n        }\r\n        return (\r\n            <div className={ classes.Auth} >\r\n                { authRedirect }\r\n                { errorMessage }\r\n                <form onSubmit={(event) => this.submitHandler(event)}>\r\n                    {form} \r\n                    <Button btnType = \"Success\"> SUBMIT </Button>  \r\n                    <Button btnType=\"Danger\" clicked={this.switchOffModeHandler}>SWITCH TO {this.state.isSignUp?'SIGNIN':'SIGNUP'}</Button>              \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    console.log(\"[Inside mapStateToProps]\",state.auth.authRedirectPath)\r\n    return {\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated:state.auth.token,\r\n        buildingBurger:state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\r\n        onSetAuthRedirectPath:() => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}