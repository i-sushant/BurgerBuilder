{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","elementConfig","onChange","changed","value","className","join","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","require","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","react_router","to","purchasedRedirect","purchased","console","log","CheckoutSummary_CheckoutSummary","path","match","component"],"mappings":"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","file":"static/js/3.dd9de158.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Input.css'\r\nconst input = (props) => {\r\n    let inputElement=null;\r\n    const inputClasses=[classes.InputElement];\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch(props.elementType){\r\n        case('input'):\r\n            inputElement=<input {...props.elementConfig} onChange={props.changed} value={props.value} \r\n            className={inputClasses.join(' ')}/>\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea {...props.elementConfig} onChange={props.changed} value={props.value} \r\n            className={inputClasses.join(' ')}/>\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select value={props.value} onChange={props.changed}\r\n                className={inputClasses.join(' ')}>\r\n                {props.elementConfig.options.map(option =>{\r\n                    return <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                })}\r\n                </select>\r\n            break;\r\n        default:\r\n            inputElement = <input {...props.elementConfig} onChange={props.changed} value={props.value} \r\n            className={inputClasses.join(' ')}/>\r\n    }\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label> \r\n            {inputElement}           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__1xBm4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1J81r\"};","import React from 'react'\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\nimport classes from './CheckoutSummary.css'\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n           <h1>We hope it tastes well!</h1>\r\n           <div style={{width:'100%',margin:'auto'}}>\r\n               <Burger ingredients={props.ingredients}/> \r\n           </div> \r\n           <Button btnType='Danger'\r\n           clicked={props.checkoutCancelled}>Cancel</Button>\r\n           <Button btnType='Success'\r\n           clicked={props.checkoutContinued}>Success</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary\r\n","import React, { Component } from 'react'\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport classes from './ContactData.css'\r\nimport axios from '../../../axios-orders'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index'\r\nimport { updateObject, checkValidity } from '../../../shared/utitlity'\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm:{\r\n            name: {\r\n                elementType:'input',\r\n                elementConfig : {\r\n                    type:'text',\r\n                    placeholder:'Your name'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    require:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation:{\r\n                    require:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP code'\r\n                },\r\n                value: '',\r\n                validation:{\r\n                    require:true,\r\n                    minLength:5,\r\n                    maxLength:6,\r\n                    isNumeric:false\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation:{\r\n                    require:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validation:{\r\n                    require:true,\r\n                    isEmail: true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options:[{value:'fastest',displayValue:'Fastest'},\r\n                            {value:'cheapest',displayValue:'Cheapest'}\r\n                            ]\r\n                },\r\n                value: 'fastest',\r\n                valid:true,\r\n                validation:{}\r\n            }\r\n        },\r\n        formIsValid:false\r\n    }\r\n    orderHandler = event =>{\r\n        event.preventDefault();\r\n        const formData ={}\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] =this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData:formData,\r\n            userId:this.props.userId\r\n\r\n        }\r\n        this.props.onOrderBurger(order,this.props.token);\r\n        \r\n    }\r\n    \r\n    inputChangedHandler = (event,inputIdentifier) => {\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        })\r\n        const updatedOrderForm = updateObject(this.state.orderForm,{\r\n            [inputIdentifier] : updatedFormElement\r\n        }) \r\n        let formIsValid =false;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\r\n        }\r\n        this.setState({orderForm:updatedOrderForm,formIsValid:!formIsValid});\r\n    }\r\n    render() {\r\n        const formElementsArray = [];\r\n        for(let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            })\r\n        }\r\n        let form =(\r\n            <form onSubmit={this.orderHandler}>\r\n                 {formElementsArray.map(formElement => {\r\n                    return <Input key={formElement.id}\r\n                                  elementType={formElement.config.elementType} \r\n                                  elementConfig={formElement.config.elementConfig}\r\n                                  value={formElement.config.value}\r\n                                  invalid={!formElement.config.valid}\r\n                                  touched={formElement.config.touched}\r\n                                  label={formElement.config.elementConfig.placeholder}\r\n                                  shouldValidate={formElement.config.validation}\r\n                                  changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                                  />\r\n                })}\r\n                <Button btnType=\"Success\" clicked={this.orderHandler} disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if(this.props.loading){\r\n            form=<Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading:state.order.loading,\r\n        token:state.auth.token,\r\n        userId:state.auth.userId\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react'\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport ContactData from './ContactData/ContactData'\r\nimport { connect } from 'react-redux'\r\n\r\n// import * as actions from '../../store/actions/index'\r\nclass Checkout extends Component {\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data')\r\n    }\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n        if(this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to='/' /> : null;\r\n            console.log(this.props.purchased);\r\n            summary = (\r\n                <div>\r\n                    { purchasedRedirect }\r\n                    < CheckoutSummary\r\n                    ingredients = {this.props.ings}\r\n                    checkoutCancelled = {this.checkoutCancelledHandler}\r\n                    checkoutContinued = {this.checkoutContinuedHandler}/>\r\n                    <Route path = {this.props.match.path + '/contact-data'}\r\n                    component = {ContactData}/>\r\n                </div>\r\n                \r\n            )\r\n        }\r\n        return summary;\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased:state.order.purchased\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout)\r\n"],"sourceRoot":""}